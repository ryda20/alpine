# borrowed from https://github.com/linuxserver/docker-baseimage-alpine/blob/master/Dockerfile

FROM alpine:3.16 as rootfs-stage

# environment
ENV REL=v3.16
ENV ARCH=x86_64
ENV MIRROR=http://dl-cdn.alpinelinux.org/alpine
ENV PACKAGES=alpine-baselayout,alpine-keys,apk-tools,busybox,libc-utils,xz


# install packages
RUN \
	apk add --no-cache \
	bash \
	curl \
	patch \
	tar \
	tzdata \
	xz #ENDRUN

# fetch builder script from gliderlabs
RUN \
	curl -o \
	/mkimage-alpine.bash -L \
	https://raw.githubusercontent.com/gliderlabs/docker-alpine/master/builder/scripts/mkimage-alpine.bash && \
	chmod +x \
	/mkimage-alpine.bash && \
	./mkimage-alpine.bash  && \
	mkdir /root-out && \
	tar xf \
	/rootfs.tar.xz -C \
	/root-out && \
	sed -i -e 's/^root::/root:!:/' /root-out/etc/shadow #ENDRUN

# set version for s6 overlay
ARG S6_OVERLAY_VERSION="3.1.2.1"
ARG S6_OVERLAY_ARCH="x86_64"

# add s6 overlay
ADD https://github.com/just-containers/s6-overlay/releases/download/v${S6_OVERLAY_VERSION}/s6-overlay-noarch.tar.xz /tmp
RUN tar -C /root-out -Jxpf /tmp/s6-overlay-noarch.tar.xz
ADD https://github.com/just-containers/s6-overlay/releases/download/v${S6_OVERLAY_VERSION}/s6-overlay-${S6_OVERLAY_ARCH}.tar.xz /tmp
RUN tar -C /root-out -Jxpf /tmp/s6-overlay-${S6_OVERLAY_ARCH}.tar.xz

# add s6 optional symlinks
ADD https://github.com/just-containers/s6-overlay/releases/download/v${S6_OVERLAY_VERSION}/s6-overlay-symlinks-noarch.tar.xz /tmp
RUN tar -C /root-out -Jxpf /tmp/s6-overlay-symlinks-noarch.tar.xz
ADD https://github.com/just-containers/s6-overlay/releases/download/v${S6_OVERLAY_VERSION}/s6-overlay-symlinks-arch.tar.xz /tmp
RUN tar -C /root-out -Jxpf /tmp/s6-overlay-symlinks-arch.tar.xz

# Runtime stage
FROM scratch
COPY --from=rootfs-stage /root-out/ /
ARG BUILD_DATE
ARG VERSION
LABEL build_version="Linuxserver.io version:- ${VERSION} Build-date:- ${BUILD_DATE}"
LABEL maintainer="TheLamer"

ENV \
	USER_NAME="stduser" \
	GROUP_NAME="stduser" \
	USER_HOME_DIR="/stduser" \
	USER_APP_DIR="/app" \
	USER_WORKSPACE_DIR="/workspace"\
	USER_CONFIG_DIR="/config"

# create standar user for rootless running: stdUser with uid/gid = 1000/1000
# environment variables
ENV \
	PS1="$(whoami)@$(hostname):$(pwd)\\$ " \
	# # container/su-exec UID, # # container/su-exec GID \
	PUID=1000 \
	PGID=1000 \
	S6_CMD_WAIT_FOR_SERVICES_MAXTIME="0" \
	S6_VERBOSITY=1 \
	S6_STAGE2_HOOK=/docker-mods


RUN \
	echo "**** install runtime packages ****" && \
	apk add --no-cache \
	bash \
	ca-certificates \
	coreutils \
	curl \
	procps \
	shadow \
	tzdata #ENDRUN

RUN \
	echo "**** create ${PUID}:${PGID} - ${USER_NAME}:${GROUP_NAME} and make our folders ****" && \
	addgroup -g ${PGID} ${GROUP_NAME} && \
	# -h DIR          Home directory
	# -g GECOS        GECOS field
	# -s SHELL        Login shell
	# -G GRP          Group
	# -S              Create a system user
	# -D              Don't assign a password
	# -H              Don't create home directory
	# -u UID          User id
	# -k SKEL         Skeleton directory (/etc/skel)
	adduser -D -u ${PUID} -s /bin/ash ${USER_NAME} -G ${GROUP_NAME} -h ${USER_HOME_DIR} && \
	mkdir -p ${USER_APP_DIR} ${USER_HOME_DIR} ${USER_WORKSPACE_DIR} && \
	# permission -> s6 have to chown it self at: root/etc/s6-overlay/s6-rc.d/init-adduser/run
	chown -R ${USER_NAME}:${GROUP_NAME} ${USER_APP_DIR} ${USER_HOME_DIR} ${USER_WORKSPACE_DIR} && \
	echo "**** cleanup ****" && \
	rm -rf /tmp/*

# add local files
COPY S6/root/ /

ENTRYPOINT ["/init"]
